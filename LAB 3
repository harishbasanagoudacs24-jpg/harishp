//LINEAR QUEUE
#include <stdio.h>
#define SIZE 5

int queue[SIZE];
int front = -1, rear = -1;

int isFull() {
    return rear == SIZE - 1;
}

int isEmpty() {
    return front == -1 || front > rear;
}


void insert(int value) {
    if (isFull()) {
        printf("Queue overflow! Cannot insert %d.\n", value);
        return;
    }
    if (front == -1) {
        front = 0;
    }
    rear++;
    queue[rear] = value;
    printf("%d inserted into the queue.\n", value);
}


void delete() {
    if (isEmpty()) {
        printf("Queue underflow! Nothing to delete.\n");
        return;
    }
    printf("%d deleted from the queue.\n", queue[front]);
    front++;
    if (front > rear) {
        front = rear = -1;
    }
}


void display() {
    if (isEmpty()) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue elements: ");
    for (int i = front; i <= rear; i++) {
        printf("%d ", queue[i]);
    }
    printf("\n");
}

int main() {
    int choice, value;

    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter your choice (1-4): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                delete();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice! Please enter between 1 and 4.\n");
        }
    }
}


//CIRCULAR QUEUE
#include <stdio.h>
#define size 5

int queue[size];
int front = -1, rear = -1;


int isfull() {
    return (front == (rear + 1) % size);
}

int isempty() {
    return (front == -1);
}

void insert(int value) {
    if (isfull()) {
        printf("Queue overflow. Cannot insert %d.\n", value);
        return;
    }
    if (isempty()) {
        front = rear = 0;
    } else {
        rear = (rear + 1) % size;
    }
    queue[rear] = value;
    printf("%d inserted into queue.\n", value);
}

void delete() {
    if (isempty()) {
        printf("Queue underflow. Nothing to delete.\n");
        return;
    }
    printf("%d deleted from the queue.\n", queue[front]);
    if (front == rear) {
        front = rear = -1;
    } else {
        front = (front + 1) % size;
    }
}

void display() {
    if (isempty()) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue elements: ");
    int i = front;
    while (1) {
        printf("%d ", queue[i]);
        if (i == rear)
            break;
        i = (i + 1) % size;
    }
    printf("\n");
}

int main() {
    int choice, value;

    while (1) {
        printf("\nCircular Queue Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display\n");
        printf("4. Exit\n");
        printf("Enter your choice (1-4): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to insert: ");
                scanf("%d", &value);
                insert(value);
                break;
            case 2:
                delete();
                break;
            case 3:
                display();
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice. Please enter 1-4.\n");
        }
    }
}


